CRUD(table에 CRUD작업을 하는 것)
-> C : row insert
-> R : row select
-> U : row update
-> D : row delete
    ↑  서버에서 처리해서 DB로
서버(java)
    ↑  서버로 데이터 전송
게시판(View) : 글쓰기(C), 글수정(U), 글삭제(D), 검색(S), 전체보기(S), 좋아요 누르기(C), 추천하기(C)
DB -> 정형(테이블과 같은 형태가 존재하는 데이터 / 사용하는 프로그램 : oracle, mysql,maria,mssql)

vs 비정형


테이블 -> 행(row)은 CRUD와 관련, 열(column)은 속성과 제약조건과 관련
-> 키 : 컬럼에 부여하는 기능(기본키, 외래키)\


** 컬럼에 제약조건을 거는 것과, 어떠한 기능을 부여하는 것인 키와 다름


기본키 : 튜플(row)을 유일하게 식별할 수 있음,
기본키로 index(색인)(검색속도가 향상)를 형성하여 저장함,
null이 불가(즉, not null을 포함)함.




이름	 주소	 전화번호
홍길동     서울	  1111
일지매	 서울	  1111
홍길동	 수원	  2222
-> 이러한 테이블의 경우 문제점찾아보기
: update나 delete의 경우, 튜플을 유니크하게 식별하지 못하기 때문에 각 이상현상이 발생함.
-> 하지만 각각의 컬럼에 제약조건을 unique로 하게되면, 너무 제한적이여서 문제가 발생함
-> 유니크한 값인, 즉 고유한 ID와 같은 항목으로 컬럼을 하나 더 만들어서 이러한 문제를 해결할 수 있음
-> 튜플을 유니크하게 식별하기 위함,,
-> 테이블작성시 신경써야할 부분 : 갱신이상(이상현상)을 고려** + 쿼리의 속도가 빨라야함**
-> 이상현상은 unique가 해결할 수 있으며(유일성), 검색속도는 인덱스가 해결할 수 있음(속도향상).
---> 이러한 두가지 역할을 동시에 할 수 있는 것이 "기본키"임!!!!!!!!!  ★ ★ ★


create table m(
ID varchar2(1) primary key,    ->  이런식으로 ID 에 기본키를 부여하여 코드를 작성할 수 있음
name varchar2(2),
add varchar2(10)
);


ex) 회사는 자동차를 등록한다. 한사람이 여러대 등록가능
ID	이름	전번	카번호
a	 홍	1111	  1
a	 홍	1111	  2
-> 이상현상이 발생
-> unique값을 id에 부여하면 같은사람이 여러개의 차를 등록할 수 없음


테이블 설계시에, 이상현상을 고려(-> 1. 유일성을 보장 / 2. 데이터의 중복을 최소화 -> 정규화를 진행)
-> 테이블을 분리하여 작성 (정규화: 데이터 중복을 최소화하기 위해서!!!!★ ★ ★)
1번테이블 (member,부모릴레이션)
ID(기본키) 이름	전번
a	   홍	1111
b	   홍	2222


2번테이블 (car, 자식릴레이션)
카번호	ID(외래키)
1	 a
2	 a


-> 1번 테이블(member, 부모릴레이션) : ID(기본키로 지정) 이름 전번   -> 이렇게만 작성하여 데이터 중복을 막아줌
-> 2번 테이블(car, 자식릴레이션) : 카번호 ID(외래키) -> ID의 외래키로, 누구의 차인지 식별가능하게 해줌.(연관성부여)
-> 외래키는 1번테이블의 ID를 참조한다.
-> 자식릴레이션의 외래키로 지정된 컬럼은 부모릴레이션의 특정 컬럼을 참조한다.★ ★ ★(컬럼 to 컬럼)

